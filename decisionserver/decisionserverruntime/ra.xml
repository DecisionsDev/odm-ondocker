<?xml version="1.0" encoding="UTF-8"?><!--

 This deployment descriptor provides the default configuration of the
 Rule Execution Server XU (Execution Unit) for JCA 1.5 and documents
 when and how to alter the descriptor.

 * In Java EE, a descriptor file that contains the default
  configuration parameters is embedded in the META-INF directory of
  the XU archive (jrules-res-xu-XXXX.rar).  If you want to modify the
  behavior of the XU in Java EE, edit the specific JCA descriptors
  (for example jrules-res-xu-JBOSS40-ds.xml or weblogic-ra.xml) or use
  the administration console of the Java EE application server.

 * In Java SE, you can add the descriptor file to your classpath to
  change the default XU configuration. This file overrides the
  default_ra.xml descriptor provided in the jrules-res-execution.jar
  file.

--><connector xmlns:j2ee="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/j2ee" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd" version="1.5">

        <description>
                The rule engine resource adapter handles the low-level details of ruleset execution and provides
                management access to its resources. You can access configuration and runtime data either through a JMX
                MBean or by using TCP/IP management.
        </description>

        <display-name>XU</display-name>

        <vendor-name>IBM</vendor-name>
        <eis-type>XU</eis-type>
        <resourceadapter-version>Decision Server 8.9.0.0</resourceadapter-version>

        <license>

                <description>
                </description>

                <license-required>true</license-required>
        </license>

        <resourceadapter>
                <resourceadapter-class>com.ibm.rules.res.xu.spi.internal.XUResourceAdapter</resourceadapter-class>

                <outbound-resourceadapter>
                        <connection-definition>
                                <managedconnectionfactory-class>
                                        ilog.rules.res.xu.spi.IlrManagedXUConnectionFactory
                                </managedconnectionfactory-class>


                                <!-- Do NOT change the value of this parameter. Changing the value of this parameter
                                     could produce unpredictable results. -->
                                <config-property>
<config-property-name>DuplicateConnectionEventListenerEnabled</config-property-name>
<config-property-type>java.lang.Boolean</config-property-type>
<config-property-value>true</config-property-value>
</config-property>


                                <!-- Do NOT change the value of this parameter. Changing the value of this parameter
                                     could produce unpredictable results. -->
                                <config-property>
<config-property-name>XuDumpSchedulerEnabled</config-property-name>
<config-property-type>java.lang.Boolean</config-property-type>
<config-property-value>false</config-property-value>
</config-property>


                                <!-- Do NOT change the value of this parameter. Changing the value of this parameter
                                     could produce unpredictable results. -->
                                <config-property>
<config-property-name>XuDumpSchedulerInterval</config-property-name>
<config-property-type>java.lang.Long</config-property-type>
<config-property-value>10000</config-property-value>
</config-property>

                                <!-- Do NOT change the value of this parameter. Changing the value of this parameter
                                     could produce unpredictable results. -->
                                <config-property>
<config-property-name>ConcurrentOpenClose</config-property-name>
<config-property-type>java.lang.Boolean</config-property-type>
<config-property-value>true</config-property-value>
</config-property>

                                <!-- Do NOT change the value of this parameter. Changing the value of this parameter
                                     could produce unpredictable results. -->
                                <config-property>
<config-property-name>JdkLoggingEnabled</config-property-name>
<config-property-type>java.lang.Boolean</config-property-type>
<config-property-value>false</config-property-value>
</config-property>

                                <!-- Do NOT change the value of this parameter. Changing the value of this parameter
                                     could produce unpredictable results. -->
                                <config-property>
<config-property-name>SystemOutLoggingEnabled</config-property-name>
<config-property-type>java.lang.Boolean</config-property-type>
<config-property-value>false</config-property-value>
</config-property>


                                <!-- Do NOT change the value of this parameter. Changing the value of this parameter
                                     could produce unpredictable results. -->
                                <config-property>
<config-property-name>RulesetFactoryProperties</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value/>
</config-property>

                                <!-- To change the properties of the pool of DocumentBuilders -->
                                <config-property>
<config-property-name>DocumentBuilderPoolProperties</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value/>
</config-property>

                                <!-- To change the properties of the pool of Transformers -->
                                <config-property>
<config-property-name>TransformerPoolProperties</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value/>
</config-property>

                                <!-- To change the properties of the ruleset cache -->
                                <config-property>
<config-property-name>RulesetCacheProperties</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value>ruleset.cache.maintenance.period=300</config-property-value>
</config-property>

                                <!--
                                  To change the properties of the compiled archives cache.

                                  The property separator is a comma ','.

                                    * maxSize = maximum number of compiled archives in the
                                                cache. The default is 10.

                                    * path = directory of the compiled archives
                                             cache.

                                   The cache will be enabled if the path property is set to a valid
                                   directory. Each instance of the XU must use a different path.
                                -->
                                <config-property>
<config-property-name>CompiledArchivesCacheProperties</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value/>
</config-property>

                                <!-- To enable ruleset usage information -->
                                <config-property>
<config-property-name>RulesetUsageMonitorEnabled</config-property-name>
<config-property-type>java.lang.Boolean</config-property-type>
<config-property-value>true</config-property-value>
</config-property>

                                <!--
                                    When the RES memory profiler estimates the memory size of an object, it
                                    includes instances of classes that start with these strings.
                                  -->
                                <config-property>
<config-property-name>MemoryProfilerIncludedPackageNames</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value>com.ibm.rules.,java.,ilog.,org.objectweb.asm.,org.apache.bcel.,javax.xml.parsers.,javax.xml.namespace.,javax.xml.transform.</config-property-value>
</config-property>

                                <!--
                                     For ruleset execution to continue during the parsing
                                     of a ruleset update, set the asynchronousRulesetParsing property to
                                     true.  When a ruleset is updated and this property is set to
                                     true, the next ruleset execution will parse the new
                                     ruleset. Executions already in progress  use the old ruleset
                                     until the new one is parsed.  The default value for this property
                                     is true.
                                  -->
                                <config-property>
<config-property-name>AsynchronousRulesetParsing</config-property-name>
<config-property-type>java.lang.Boolean</config-property-type>
<config-property-value>true</config-property-value>
</config-property>

                                <!--
                                    To change the trace level of the XU, replace the default value of FINE (debug messages, errors, and warnings) with one of the
                                    following:
                                    * OFF: no trace
                                    * SEVERE: only errors
                                    * WARNING: only errors and warnings
                                    * INFO: informational messages, errors, and warnings
                                  -->
                                <config-property>
<config-property-name>TraceLevel</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value>FINE</config-property-value>
</config-property>

                                <!-- To flush the log stream each time a message is written, change the value to true. -->
                                <config-property>
<config-property-name>TraceAutoFlush</config-property-name>
<config-property-type>java.lang.Boolean</config-property-type>
<config-property-value>false</config-property-value>
</config-property>

                                <!-- To disable profiling, change the value to false. -->
                                <config-property>
<config-property-name>ProfilingEnabled</config-property-name>
<config-property-type>java.lang.Boolean</config-property-type>
<config-property-value>true</config-property-value>
</config-property>

                                <!--
                                  To change the properties of the persistence mode, replace the value with one of the following.
                                    * File persistence:
                                      <config-property-value>file</config-property-value>

                                    * Database persistence in Java SE:
                                      <config-property-value>jdbc</config-property-value>

                                    * Database persistence with a data source:
                                      <config-property-value>datasource</config-property-value>
                                -->
                                <config-property>
<config-property-name>PersistenceType</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value>datasource</config-property-value>
</config-property>

                                <!--
                                  To change the properties of the persistence mode, replace the value with one of the following:
                                  * For database persistence in Java SE:
                                    <config-property-value>
                                      DRIVER_CLASS_NAME=org.apache.derby.jdbc.EmbeddedDriver,
                                      URL=jdbc:derby:/tmp/data/derby/resdb;create=true,
                                      USER=RES,
                                      PASSWORD=RES
                                    </config-property-value>
                                    Where:
                                      * DRIVER_CLASS_NAME: A driver implementation class to establish a connection with the database.
                                      * URL: The JDBC URL to establish a connection with the database.
                                      * USER: Login to use with the database connection.
                                      * PASSWORD: A password to use with the database connection.
                                        => you can choose to use CRYPTED_PASSWORD to give a crypted password to use with the database connection.

                                  * For database persistence with a data source:
                                    <config-property-value>JNDI_NAME=jdbc/resdatasource</config-property-value>
                                    Where JNDI_NAME is the JNDI name of the data source.

                                  * For file persistence:
                                    <config-property-value>DIRECTORY=res_data</config-property-value>
                                    Where the path to the top directory containing rulesets is res_data.

                                  * For both persistence types, the property CONCURRENT_PERSISTENCE_ACCESS specifies whether persistence access can be concurrent.
                                    Add the property to the configuration of the ruleset provider.
                                    <config-property-value>
                                      JNDI_NAME=jdbc/resdatasource,
                                      CONCURRENT_PERSISTENCE_ACCESS=false
                                    </config-property-value>

                                  * Once the ruleset persistence is set, you can complete your configuration for the Managed XOM:

                                      * For database persistence in Java SE, complete the persistence properties as follows:
                                        <config-property-value>
                                            [...]
                                            XOM_PERSISTENCE_TYPE=jdbc,
                                            XOM_PERSISTENCE_DRIVER_CLASS_NAME=org.apache.derby.jdbc.EmbeddedDriver,
                                            XOM_PERSISTENCE_URL=jdbc:derby:/tmp/data/derby/resdb;create=true,
                                            XOM_PERSISTENCE_USER=RES,
                                            XOM_PERSISTENCE_PASSWORD=RES
                                        </config-property-value>
                                        Where:
                                          * XOM_PERSISTENCE_DRIVER_CLASS_NAME: A driver implementation class to establish a connection with the database.
                                          * XOM_PERSISTENCE_URL: The JDBC URL to establish a connection with the database.
                                          * XOM_PERSISTENCE_USER: Login to use with the database connection.
                                          * XOM_PERSISTENCE_PASSWORD: A password to use with the database connection.
                                            => you could choose to use XOM_PERSISTENCE_CRYPTED_PASSWORD to give a crypted password to use with the database connection.

                                      * For database persistence with a data source, complete the persistence properties as follow:
                                        <config-property-value>
                                            [...]
                                            XOM_PERSISTENCE_TYPE=datasource,
                                            XOM_PERSISTENCE_JNDI_NAME=jdbc/resdatasource
                                        </config-property-value>
                                        Where XOM_PERSISTENCE_JNDI_NAME is the JNDI name of the data source.

                                      * For file persistence, complete the persistence properties as follow:
                                        <config-property-value>
                                            [...]
                                            XOM_PERSISTENCE_TYPE=file
                                            XOM_PERSISTENCE_DIRECTORY=res_xom
                                        </config-property-value>
                                        Where the path to the top directory containing the Managed XOM is res_xom.

                                  * To switch to a lazy loading mode of the Managed XOM resources, you have to add an additional property XOM_PERSISTENCE_LAZYLOAD and set it to "true".
                                    Note that this option is only available for the database access.
                                    Some JDBC drivers may not accept this option because it breaks the classical transactional contract.
                                        <config-property-value>
                                            [...]
                                            XOM_PERSISTENCE_TYPE=datasource,
                                            XOM_PERSISTENCE_JNDI_NAME=jdbc/resdatasource,
                                            XOM_PERSISTENCE_LAZYLOAD=true
                                        </config-property-value>

                                  * The decision engine runtimes are searched in the file system directory that is specified by the XU persistence setting DERUNTIME_DIRECTORY.
                                    By default, the property DERUNTIME_DIRECTORY is set to "deruntime".
                                      <config-property-value>
                                        [...]
                                        DERUNTIME_DIRECTORY=deruntime
                                      </config-property-value>
                                -->
                                <config-property>
<config-property-name>PersistenceProperties</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value>JNDI_NAME=jdbc/resdatasource,XOM_PERSISTENCE_TYPE=datasource,XOM_PERSISTENCE_JNDI_NAME=jdbc/resdatasource</config-property-value>
</config-property>

                                <!--
                                  To modify the list of the XU event plug-ins, add each new plug-in to the plugins property.
                                  Each entry is separated by a comma ',' and plug-in properties are
                                  described by a set of key/value pairs. The special key 'pluginClass'
                                  specifies the implementation class of the plug-in property.

                                  The following element declares no plug-ins:
                                    <config-property-value>{}</config-property-value> means no plugins

                                  By default, the XU MBean plug-in is used for execution statistics and ruleset update
                                  notification by the Rule Execution Server Console. Do not remove this
                                  plug-in if you want to use the Rule Execution Server Console.

                                  Here is an example:
                                    <config-property>
                                      <config-property-name>plugins</config-property-name>
                                      <config-property-type>java.lang.String</config-property-type>
                                      <config-property-value>
                                        {pluginClass=Management,xuName=default},
                                        {pluginClass=mypackage.MyPlugin,a_property_key=the_value}
                                      </config-property-value>
                                    </config-property>

                                    To enable management of Java SE XU instances that are running on different JVM or JMX MBean server, you must configure the  XU MBean plug-in with the TCPIP protocol:
                                        <config-property>
                                           <config-property-name>plugins</config-property-name>
                                           <config-property-type>java.lang.String</config-property-type>
                                           <config-property-value>{pluginClass=Management,xuName=default,protocol=tcpip,tcpip.port=TCPIP_PORT,tcpip.host=RES_CONSOLE_HOST,tcpip.retryInterval=INTERVAL}
                                      </config-property-value>
                                    </config-property>
                                    where:
                                RES_CONSOLE_HOST is the host on which the Rule Execution Server console is deployed.
                                TCPIP_PORT is the TCP/IP port on which the Rule Execution Server console management server is listening.
                                INTERVAL is the interval of time, in milliseconds, during which the console tries to reconnect to the management server if a connection fails.

                                -->
                                <config-property>
<config-property-name>Plugins</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value>{pluginClass=Management,xuName=xuHTDS,protocol=tcpip,tcpip.port=TCPIP_PORT,tcpip.host=RES_CONSOLE_HOST},{pluginClass=HTDS}</config-property-value>
</config-property>

                                <!--

                                    To change the settings of the connection pool of the XU in
                                    Java SE mode.

                                  This property is used only when the XU is in Java SE mode.

                                  When the XU is deployed as a connector in a Jave EE
                                  application server, this property is not used. The connection
                                  pool is provided by the application server.

                                  The properties separator is a comma ','.


                                * pool.maxSize = maximum number of connections in the pool, the default value is 20
                                * pool.class = name of the class implementing the pool (must implement the interface ilog.rules.res.xu.pool.IlrPool)
                                -->
                                <config-property>
<config-property-name>DefaultConnectionManagerProperties</config-property-name>
<config-property-type>java.lang.String</config-property-type>
<config-property-value/>
</config-property>

                                <connectionfactory-interface>
                                        javax.resource.cci.ConnectionFactory
                                </connectionfactory-interface>
                                <connectionfactory-impl-class>
                                        ilog.rules.res.xu.cci.IlrXUConnectionFactory
                                </connectionfactory-impl-class>
                                <connection-interface>javax.resource.cci.Connection</connection-interface>
                                <connection-impl-class>ilog.rules.res.xu.cci.IlrXUConnection</connection-impl-class>
                        </connection-definition>

                        <transaction-support>NoTransaction</transaction-support>

                        <authentication-mechanism>
                                <authentication-mechanism-type>BasicPassword</authentication-mechanism-type>
                                <credential-interface>javax.resource.spi.security.PasswordCredential</credential-interface>
                        </authentication-mechanism>
                        <reauthentication-support>false</reauthentication-support>
                </outbound-resourceadapter>
        </resourceadapter>

</connector>
